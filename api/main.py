# main.py - CORRECTION DES DOUBLES PREFIXES ET TAGS
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from fastapi.middleware.trustedhost import TrustedHostMiddleware
import logging
from contextlib import asynccontextmanager

from api.core.config import settings
from api.core.database import engine
from api.models import Base

# Import des routers
from api.routers import (
    auth,           # ‚úÖ Corrig√©: plus de double prefix
    performers,     # Gestion des employ√©s
    rooms,          # Gestion des pi√®ces
    tasks,          # Gestion des t√¢ches
    sessions,       # Sessions de nettoyage
    logs,           # Logs de t√¢ches
    exports,        # Exports PDF/ZIP
    dashboard       # ‚úÖ Corrig√©: plus de double prefix
)
from api.routers import enterprise  # Import direct du routeur enterprise

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

@asynccontextmanager
async def lifespan(app: FastAPI):
    """Gestion du cycle de vie de l'application"""
    # Startup
    logger.info("üöÄ D√©marrage de l'API Cleaning...")
    
    # Cr√©er les tables si elles n'existent pas
    Base.metadata.create_all(bind=engine)
    logger.info("‚úÖ Base de donn√©es initialis√©e")
    
    yield
    
    # Shutdown
    logger.info("üõë Arr√™t de l'API Cleaning...")

def create_app() -> FastAPI:
    """Factory pour cr√©er l'application FastAPI"""
    
    app = FastAPI(
        title="API Nettoyage Micro-Cr√®che",
        description="""
        API moderne pour la gestion du nettoyage d'une micro-cr√®che.
        
        üîë **Authentification simplifi√©e :**
        - Compte Firebase = automatiquement G√©rant
        - Acc√®s complet √† toutes les fonctionnalit√©s
        - Gestion des employ√©s int√©gr√©e
        
        üéØ **Concept :**
        1. Le g√©rant se connecte avec son compte Firebase
        2. Il peut g√©rer rooms, tasks, et ses employ√©s
        3. S√©lection d'employ√© via interface pour les sessions
        4. Reconnexion obligatoire pour revenir en mode g√©rant
        """,
        version="2.0.0",
        lifespan=lifespan,
        docs_url="/docs",
        redoc_url="/redoc"
    )
    
    # ===== MIDDLEWARE DE S√âCURIT√â =====
    
    # CORS - Configuration permissive pour le d√©veloppement
    app.add_middleware(
        CORSMiddleware,
        allow_origins=settings.cors_origins_list,
        allow_credentials=True,
        allow_methods=["*"],
        allow_headers=["*"],
    )
    
    # Trusted hosts
    if not settings.debug:
        app.add_middleware(
            TrustedHostMiddleware,
            allowed_hosts=settings.allowed_hosts_list
        )
    
    # ===== ROUTES D'AUTHENTIFICATION =====
    # ‚úÖ CORRIG√â: auth.router n'a plus de tags, on les g√®re ici
    app.include_router(
        auth.router, 
        prefix="/auth", 
        tags=["üîê Authentification"]
    )
    
    # ===== GESTION DES EMPLOY√âS =====
    app.include_router(
        performers.router, 
        prefix="/performers", 
        tags=["üë• Employ√©s"]
    )
    
    # ===== GESTION DES RESSOURCES =====
    app.include_router(
        rooms.router, 
        prefix="/rooms", 
        tags=["üè† Pi√®ces"]
    )
    
    app.include_router(
        tasks.router, 
        prefix="/tasks", 
        tags=["‚úÖ T√¢ches mod√®les"]
    )
    
    app.include_router(
        tasks.assigned_router,
        prefix="/assigned-tasks",
        tags=["üìã T√¢ches assign√©es"]
    )
    
    # ===== SESSIONS DE NETTOYAGE =====
    app.include_router(
        sessions.router, 
        prefix="/sessions", 
        tags=["üßπ Sessions"]
    )
    
    # ===== LOGS ET EXPORTS =====
    app.include_router(
        logs.router, 
        prefix="/logs", 
        tags=["üìù Logs de t√¢ches"]
    )
    
    app.include_router(
        exports.router, 
        prefix="/exports", 
        tags=["üìä Exports"]
    )

    # ===== TABLEAU DE BORD =====
    # ‚úÖ CORRIG√â: dashboard.router n'a plus de tags, on les g√®re ici
    app.include_router(
        dashboard.router, 
        prefix="/dashboard", 
        tags=["üìà Dashboard"]
    )
    
    # ===== GESTION DES ENTREPRISES =====
    app.include_router(
        enterprise.router,
        prefix="/enterprise",
        tags=["üè¢ Entreprises"]
    )
    
    # ===== ROUTES DE BASE =====
    
    @app.get("/", tags=["üè† Accueil"])
    async def root():
        """Page d'accueil de l'API"""
        return {
            "message": "API Nettoyage Micro-Cr√®che",
            "version": "2.0.0",
            "status": "‚úÖ Op√©rationnelle",
            "features": {
                "authentication": "Firebase auto-cr√©ation",
                "user_role": "GERANTE par d√©faut",
                "performer_management": "Int√©gr√©",
                "routing": "‚úÖ Pr√©fixes corrig√©s"
            },
            "endpoints": {
                "docs": "/docs",
                "redoc": "/redoc",
                "auth_login": "/auth/login",
                "auth_me": "/auth/me",
                "dashboard": "/dashboard",
                "performers": "/performers/",
                "sessions_today": "/sessions/today"
            }
        }
    
    @app.get("/health", tags=["üè• Sant√©"])
    async def health_check():
        """V√©rification de l'√©tat de l'API"""
        try:
            # Test de connexion √† la base de donn√©es
            from api.core.database import SessionLocal
            db = SessionLocal()
            db.execute("SELECT 1")
            db.close()
            
            return {
                "status": "healthy",
                "database": "‚úÖ Connected",
                "routes": "‚úÖ Fixed (no more double prefixes)",
                "timestamp": "2024-08-19T12:00:00Z"
            }
        except Exception as e:
            return {
                "status": "unhealthy",
                "database": f"‚ùå Error: {str(e)}",
                "timestamp": "2024-08-19T12:00:00Z"
            }
    
    return app

# Cr√©er l'instance de l'application
app = create_app()

# Point d'entr√©e pour uvicorn
if __name__ == "__main__":
    import uvicorn
    
    logger.info("üöÄ Lancement de l'API en mode d√©veloppement")
    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port=8000,
        reload=True,
        log_level="info"
    )
