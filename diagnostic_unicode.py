# diagnostic_unicode.py
#!/usr/bin/env python3
"""
Script de diagnostic pour identifier les probl√®mes d'encodage Unicode
"""
import os
import sys
import locale
from pathlib import Path

def print_separator(title):
    print(f"\n{'='*20} {title} {'='*20}")

def check_encoding():
    """V√©rifier l'encodage du syst√®me"""
    print_separator("ENCODAGE SYST√àME")
    
    print(f"üêç Python version: {sys.version}")
    print(f"üìÅ R√©pertoire courant: {os.getcwd()}")
    print(f"üî§ Encodage par d√©faut: {sys.getdefaultencoding()}")
    print(f"üìù Encodage filesystem: {sys.getfilesystemencoding()}")
    print(f"‚å®Ô∏è Encodage stdin: {sys.stdin.encoding}")
    print(f"üì∫ Encodage stdout: {sys.stdout.encoding}")
    
    # Locale syst√®me
    try:
        loc = locale.getdefaultlocale()
        print(f"üåç Locale syst√®me: {loc}")
    except:
        print("‚ùå Impossible de r√©cup√©rer la locale")
    
    # Variables d'environnement importantes
    env_vars = ['PYTHONIOENCODING', 'LANG', 'LC_ALL', 'PYTHONPATH']
    print(f"\nüìã Variables d'environnement:")
    for var in env_vars:
        value = os.environ.get(var, "Non d√©finie")
        print(f"   {var}: {value}")

def check_path_encoding():
    """V√©rifier l'encodage du chemin"""
    print_separator("ANALYSE DU CHEMIN")
    
    current_path = Path.cwd()
    print(f"üìÅ Chemin complet: {current_path}")
    
    # Tester l'encodage de chaque partie du chemin
    parts = current_path.parts
    print(f"\nüîç Analyse des parties du chemin:")
    
    for i, part in enumerate(parts):
        try:
            # Tester l'encodage UTF-8
            part_bytes = part.encode('utf-8')
            part_decoded = part_bytes.decode('utf-8')
            status = "‚úÖ"
        except UnicodeError as e:
            status = f"‚ùå {e}"
        
        print(f"   {i}: '{part}' ‚Üí {status}")
        
        # D√©tecter les caract√®res probl√©matiques
        for char in part:
            if ord(char) > 127:  # Caract√®res non-ASCII
                print(f"      ‚ö†Ô∏è Caract√®re non-ASCII d√©tect√©: '{char}' (code: {ord(char)})")

def check_database_config():
    """V√©rifier la configuration de la base de donn√©es"""
    print_separator("CONFIGURATION BASE DE DONN√âES")
    
    # Chercher le fichier .env
    env_file = Path(".env")
    if env_file.exists():
        print("‚úÖ Fichier .env trouv√©")
        
        try:
            with open(env_file, 'r', encoding='utf-8') as f:
                content = f.read()
                
            # Chercher DATABASE_URL
            for line in content.split('\n'):
                if line.startswith('DATABASE_URL'):
                    print(f"üîó {line}")
                    
                    # V√©rifier si client_encoding est d√©fini
                    if 'client_encoding' in line:
                        print("‚úÖ client_encoding d√©fini")
                    else:
                        print("‚ö†Ô∏è client_encoding manquant")
                        print("   Ajoutez ?client_encoding=utf8 √† la fin de l'URL")
                    
        except UnicodeDecodeError as e:
            print(f"‚ùå Erreur lecture .env: {e}")
            print("   Le fichier .env contient des caract√®res non-UTF8")
    else:
        print("‚ùå Fichier .env introuvable")

def test_database_connection():
    """Tester la connexion √† la base de donn√©es"""
    print_separator("TEST CONNEXION BASE")
    
    try:
        # Tenter d'importer les modules
        import psycopg2
        print("‚úÖ psycopg2 import√©")
        
        # Lire la configuration
        from dotenv import load_dotenv
        load_dotenv()
        
        db_url = os.getenv('DATABASE_URL')
        if db_url:
            print(f"üîó URL base: {db_url[:50]}...")
            
            # Ajouter client_encoding si manquant
            if 'client_encoding' not in db_url:
                separator = "&" if "?" in db_url else "?"
                db_url_fixed = f"{db_url}{separator}client_encoding=utf8"
                print(f"üîß URL corrig√©e: {db_url_fixed[:50]}...")
            else:
                db_url_fixed = db_url
            
            # Tester la connexion
            try:
                conn = psycopg2.connect(db_url_fixed)
                print("‚úÖ Connexion PostgreSQL r√©ussie")
                conn.close()
            except Exception as e:
                print(f"‚ùå Erreur connexion: {e}")
        else:
            print("‚ùå DATABASE_URL non trouv√©e dans .env")
            
    except ImportError as e:
        print(f"‚ùå Module manquant: {e}")
    except Exception as e:
        print(f"‚ùå Erreur: {e}")

def provide_solutions():
    """Proposer des solutions"""
    print_separator("SOLUTIONS RECOMMAND√âES")
    
    current_path = str(Path.cwd())
    
    if "Nettoyage" in current_path:
        print("üéØ PROBL√àME IDENTIFI√â: Caract√®res accentu√©s dans le chemin")
        print("\nüìã Solutions (par ordre de pr√©f√©rence):")
        
        print("\n1Ô∏è‚É£ SOLUTION RAPIDE - Variables d'environnement:")
        print("   set PYTHONIOENCODING=utf-8")
        print("   set LANG=en_US.UTF-8")
        print("   alembic upgrade head")
        
        print("\n2Ô∏è‚É£ SOLUTION SCRIPT - Utiliser le script batch:")
        print("   run_alembic.bat upgrade")
        
        print("\n3Ô∏è‚É£ SOLUTION D√âFINITIVE - Renommer le dossier:")
        new_path = current_path.replace("Nettoyage", "Cleaning")
        print(f"   Renommer: {current_path}")
        print(f"   Vers:     {new_path}")
        
        print("\n4Ô∏è‚É£ SOLUTION .ENV - Forcer UTF-8 dans la cha√Æne de connexion:")
        print("   DATABASE_URL=postgresql://user:pass@host:port/db?client_encoding=utf8")
    
    else:
        print("üîç Aucun caract√®re accentu√© d√©tect√© dans le chemin")
        print("Le probl√®me peut venir de:")
        print("   - Configuration PostgreSQL")
        print("   - Variables d'environnement")
        print("   - Encodage du fichier .env")

def main():
    """Fonction principale"""
    print("üîç DIAGNOSTIC D'ENCODAGE UNICODE")
    print("================================")
    
    check_encoding()
    check_path_encoding()
    check_database_config()
    test_database_connection()
    provide_solutions()
    
    print(f"\n‚úÖ Diagnostic termin√©")

if __name__ == "__main__":
    main()