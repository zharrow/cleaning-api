# version: '3.9'

services:
  # === APPLICATION FASTAPI ===
  app:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: cleaning-api-app
    ports:
      - "8000:8000"
    environment:
      # Base de données
      - DATABASE_URL=postgresql://postgres:postgres_pass@db:5432/cleaning_db
      
      # Cache Redis
      - REDIS_URL=redis://redis:6379/0
      
      # Firebase (nécessite le fichier firebase-credentials.json)
      - FIREBASE_CREDENTIALS_PATH=/app/firebase-credentials.json
      
      # Environnement
      - ENVIRONMENT=development
      - DEBUG=true
      - LOG_LEVEL=INFO
      
      # Sécurité
      - SECRET_KEY=dev-secret-key-change-in-production
      - ALLOWED_HOSTS=localhost,127.0.0.1,0.0.0.0
      - CORS_ORIGINS=http://localhost:3000,http://localhost:5173,http://localhost:8080
      
      # Rate limiting
      - RATE_LIMIT_REQUESTS=100
      - RATE_LIMIT_PERIOD=60
      
      # Uploads
      - UPLOADS_DIR=/app/uploads
      - MAX_FILE_SIZE=10485760
      - ALLOWED_FILE_TYPES=image/jpeg,image/png,image/webp
      
      # Pagination
      - DEFAULT_PAGE_SIZE=20
      - MAX_PAGE_SIZE=100
      
      # Scheduler
      - ENABLE_SCHEDULER=true
      
      # Monitoring
      - PYTHONUNBUFFERED=1
      - PYTHONPATH=/app
    
    volumes:
      # Persistance des uploads
      - ./uploads:/app/uploads
      - ./logs:/app/logs
      
      # Configuration Firebase (créer ce fichier)
      - ./firebase-credentials.json:/app/firebase-credentials.json:ro
      
      # Développement : monter le code source
      - .:/app
    
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    
    restart: unless-stopped
    
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    command: >
      sh -c "
        echo '🚀 Démarrage de l\'application Cleaning API...' &&
        echo '📁 Création des répertoires...' &&
        mkdir -p /app/uploads /app/logs &&
        echo '🗄️ Initialisation de la base de données...' &&
        python init_db.py &&
        echo '✅ Base de données initialisée' &&
        echo '🌟 Démarrage du serveur API...' &&
        uvicorn api.main:app --host 0.0.0.0 --port 8000 --reload
      "
    
    networks:
      - cleaning_network

  # === BASE DE DONNÉES POSTGRESQL ===
  db:
    image: postgres:15-alpine
    container_name: cleaning-api-db
    environment:
      - POSTGRES_DB=cleaning_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres_pass
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=fr_FR.UTF-8 --lc-ctype=fr_FR.UTF-8
      - TZ=Europe/Paris
    
    ports:
      - "5432:5432"
    
    volumes:
      # Persistance des données
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
      
      # Scripts d'initialisation personnalisés
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    
    restart: unless-stopped
    
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d cleaning_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    
    networks:
      - cleaning_network

  # === CACHE REDIS ===
  redis:
    image: redis:7-alpine
    container_name: cleaning-api-redis
    ports:
      - "6379:6379"
    
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    
    command: redis-server /usr/local/etc/redis/redis.conf --appendonly yes
    
    restart: unless-stopped
    
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    
    networks:
      - cleaning_network

  # === ADMINISTRATION BASE DE DONNÉES ===
  adminer:
    image: adminer:4.8.1-standalone
    container_name: cleaning-api-adminer
    ports:
      - "8080:8080"
    
    environment:
      - ADMINER_DEFAULT_SERVER=db
      - ADMINER_DESIGN=pepa-linha
    
    depends_on:
      - db
    
    restart: unless-stopped
    
    networks:
      - cleaning_network

  # === BACKUP AUTOMATIQUE ===
  backup:
    image: postgres:15-alpine
    container_name: cleaning-api-backup
    environment:
      - PGPASSWORD=postgres_pass
      - TZ=Europe/Paris
    
    volumes:
      - ./backups:/backups
    
    depends_on:
      db:
        condition: service_healthy
    
    restart: unless-stopped
    
    command: >
      sh -c "
        echo '📁 Service de backup automatique démarré' &&
        while true; do
          echo '💾 Création du backup quotidien...' &&
          pg_dump -h db -U postgres -d cleaning_db > /backups/daily_backup_$$(date +%Y%m%d_%H%M%S).sql &&
          echo '✅ Backup créé avec succès' &&
          echo '🧹 Suppression des anciens backups (>7 jours)...' &&
          find /backups -name '*.sql' -mtime +7 -delete &&
          echo '😴 Attente 24h pour le prochain backup...' &&
          sleep 86400
        done
      "
    
    networks:
      - cleaning_network

  # === MONITORING ET MÉTRIQUES ===
  prometheus:
    image: prom/prometheus:latest
    container_name: cleaning-api-prometheus
    ports:
      - "9090:9090"
    
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    
    restart: unless-stopped
    
    networks:
      - cleaning_network

  # === VISUALISATION GRAFANA ===
  grafana:
    image: grafana/grafana:latest
    container_name: cleaning-api-grafana
    ports:
      - "3000:3000"
    
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    
    depends_on:
      - prometheus
    
    restart: unless-stopped
    
    networks:
      - cleaning_network

  # === PROXY NGINX (OPTIONNEL) ===
  nginx:
    image: nginx:alpine
    container_name: cleaning-api-nginx
    ports:
      - "80:80"
      - "443:443"
    
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./uploads:/var/www/uploads:ro
    
    depends_on:
      - app
    
    restart: unless-stopped
    
    networks:
      - cleaning_network

volumes:
  # Persistance des données
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/postgres
  
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/redis
  
  prometheus_data:
    driver: local
  
  grafana_data:
    driver: local

networks:
  cleaning_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16