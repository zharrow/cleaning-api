"""
Script d'initialisation de la base de donn√©es SANS Alembic
Usage: python init_db.py
"""
import asyncio
from sqlalchemy import create_engine
from api.core.database import Base, engine  
from api.core.config import settings
from api.models import *  # Import tous les mod√®les
from sqlalchemy.orm import sessionmaker
import uuid

def create_tables():
    """Cr√©e toutes les tables directement avec SQLAlchemy"""
    print("üèóÔ∏è Cr√©ation des tables...")
    Base.metadata.create_all(bind=engine)
    print("‚úÖ Tables cr√©√©es avec succ√®s")

def populate_initial_data():
    """Ajoute des donn√©es initiales"""
    engine = create_engine(settings.database_url)
    SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
    db = SessionLocal()
    
    try:
        from api.models.user import User, UserRole
        from api.models.performer import Performer
        from api.models.room import Room
        from api.models.task import TaskTemplate
        
        # V√©rifier si des donn√©es existent d√©j√†
        existing_users = db.query(User).count()
        if existing_users > 0:
            print("‚ÑπÔ∏è Des donn√©es existent d√©j√†, pas d'initialisation")
            return
        
        print("üå± Ajout des donn√©es initiales...")
        
        # Cr√©er un utilisateur administrateur de test
        admin_user = User(
            id=str(uuid.uuid4()),
            firebase_uid="admin_test_uid",
            full_name="Administrateur Test",
            role=UserRole.ADMIN,
            is_active=True
        )
        db.add(admin_user)
        db.flush()  # Pour obtenir l'ID
        
        # Ex√©cutants par d√©faut
        performers_data = [
            {"first_name": "Marie", "last_name": "Dupont", "email": "marie.dupont@exemple.fr"},
            {"first_name": "Jean", "last_name": "Martin", "email": "jean.martin@exemple.fr"},
            {"first_name": "Sophie", "last_name": "Leroux", "email": "sophie.leroux@exemple.fr"},
        ]
        
        for performer_data in performers_data:
            performer = Performer(
                id=str(uuid.uuid4()),
                first_name=performer_data["first_name"],
                last_name=performer_data["last_name"],
                email=performer_data["email"],
                manager_id=admin_user.id,
                is_active=True
            )
            db.add(performer)
        
        # Pi√®ces par d√©faut
        rooms_data = [
            {"name": "Salle de jeu", "description": "Espace principal d'activit√©", "display_order": 1},
            {"name": "Cuisine", "description": "Pr√©paration des repas", "display_order": 2},
            {"name": "Salle de bain", "description": "Sanitaires et change", "display_order": 3},
            {"name": "Entr√©e", "description": "Hall d'accueil", "display_order": 4},
            {"name": "Ext√©rieur", "description": "Cour et jardin", "display_order": 5},
        ]
        
        for room_data in rooms_data:
            room = Room(
                id=str(uuid.uuid4()),
                **room_data,
                is_active=True
            )
            db.add(room)
        
        # T√¢ches par d√©faut
        tasks_data = [
            {"title": "D√©sinfecter les surfaces", "description": "Nettoyer et d√©sinfecter toutes les surfaces"},
            {"title": "Aspirer/Balayer", "description": "Nettoyage des sols"},
            {"title": "Vider les poubelles", "description": "√âvacuer les d√©chets"},
            {"title": "Nettoyer les vitres", "description": "Nettoyage des fen√™tres et miroirs"},
            {"title": "D√©sinfecter les jouets", "description": "Nettoyage et d√©sinfection des jouets"},
            {"title": "Nettoyer les WC", "description": "Nettoyage complet des sanitaires"},
            {"title": "Laver le linge", "description": "Lavage du linge de la cr√®che"},
        ]
        
        for task_data in tasks_data:
            task = TaskTemplate(
                id=str(uuid.uuid4()),
                **task_data,
                is_active=True
            )
            db.add(task)
        
        db.commit()
        print("‚úÖ Donn√©es initiales ajout√©es avec succ√®s")
        
    except Exception as e:
        db.rollback()
        print(f"‚ùå Erreur lors de l'ajout des donn√©es: {e}")
        raise
    finally:
        db.close()

def main():
    """Fonction principale d'initialisation"""
    print("üöÄ Initialisation de la base de donn√©es (SQLAlchemy direct)...")
    
    # Cr√©er les tables
    create_tables()
    
    # Ajouter les donn√©es initiales
    populate_initial_data()
    
    print("‚úÖ Initialisation termin√©e!")
    print("\nüìù Prochaines √©tapes:")
    print("1. Configurer les t√¢ches assign√©es via l'API")
    print("2. Cr√©er les utilisateurs Firebase")
    print("3. D√©marrer l'application: python -m api.main")

if __name__ == "__main__":
    main()