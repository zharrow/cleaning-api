"""
Script d'initialisation de la base de donn√©es avec types UUID coh√©rents
Usage: python init_db.py
"""
import sys
import os
from pathlib import Path

# Ajouter le r√©pertoire racine au PYTHONPATH
root_dir = Path(__file__).parent
sys.path.insert(0, str(root_dir))

def enable_uuid_extension():
    """Active l'extension UUID-OSSP dans PostgreSQL"""
    try:
        from sqlalchemy import create_engine, text
        
        database_url = os.getenv("DATABASE_URL", "postgresql://postgres:postgres_pass@localhost:5432/cleaning_db")
        engine = create_engine(database_url)
        
        with engine.connect() as conn:
            # Activer l'extension UUID-OSSP
            conn.execute(text("CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\""))
            conn.commit()
            print("‚úÖ Extension UUID-OSSP activ√©e")
        
        return engine
        
    except Exception as e:
        print(f"‚ùå Erreur activation UUID: {e}")
        return None

def create_tables():
    """Cr√©e toutes les tables avec les mod√®les corrig√©s"""
    try:
        print("üóÑÔ∏è Connexion √† la base de donn√©es...")
        
        # Activer l'extension UUID d'abord
        engine = enable_uuid_extension()
        if not engine:
            return False
        
        from sqlalchemy import text
        
        # Test de connexion
        with engine.connect() as conn:
            result = conn.execute(text("SELECT 1 as test"))
            test_row = result.fetchone()
            print(f"‚úÖ Connexion r√©ussie: {test_row}")
        
        print("üèóÔ∏è Import des mod√®les avec types UUID coh√©rents...")
        
        # Import de la base
        from api.models.base import Base
        
        # Import de tous les mod√®les
        from api.models.user import User
        from api.models.performer import Performer  
        from api.models.room import Room
        from api.models.task import TaskTemplate, AssignedTask
        from api.models.session import CleaningSession, CleaningLog
        from api.models.export import Export
        
        print("‚úÖ Tous les mod√®les import√©s")
        
        print("üèóÔ∏è Cr√©ation des tables...")
        Base.metadata.create_all(bind=engine)
        print("‚úÖ Tables cr√©√©es avec succ√®s")
        
        # V√©rifier les tables cr√©√©es
        with engine.connect() as conn:
            result = conn.execute(text("""
                SELECT table_name 
                FROM information_schema.tables 
                WHERE table_schema = 'public'
                ORDER BY table_name
            """))
            tables = [row[0] for row in result.fetchall()]
            if tables:
                print(f"üìã Tables cr√©√©es: {', '.join(tables)}")
            else:
                print("‚ö†Ô∏è Aucune table trouv√©e")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation des tables: {e}")
        import traceback
        traceback.print_exc()
        return False

def create_sample_data():
    """Cr√©e des donn√©es d'exemple"""
    try:
        print("üå± Cr√©ation de donn√©es d'exemple...")
        
        from sqlalchemy import create_engine
        from sqlalchemy.orm import sessionmaker
        from api.models.user import User, UserRole
        from api.models.performer import Performer
        from api.models.room import Room
        from api.models.task import TaskTemplate, TaskType
        
        database_url = os.getenv("DATABASE_URL", "postgresql://postgres:postgres_pass@localhost:5432/cleaning_db")
        engine = create_engine(database_url)
        SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
        db = SessionLocal()
        
        try:
            # V√©rifier si des donn√©es existent d√©j√†
            user_count = db.query(User).count()
            if user_count > 0:
                print(f"‚ÑπÔ∏è {user_count} utilisateur(s) d√©j√† pr√©sent(s)")
                return True
            
            # Cr√©er un utilisateur test
            test_user = User(
                firebase_uid="test-uid-123",
                full_name="Test Manager",
                role=UserRole.GERANTE
            )
            db.add(test_user)
            db.flush()  # Pour obtenir l'ID
            
            # Cr√©er quelques performers
            performers_data = [
                "Marie Dupont",
                "Jean Martin", 
                "Sophie Leroux"
            ]
            
            for name in performers_data:
                performer = Performer(
                    name=name,
                    created_by_id=test_user.id
                )
                db.add(performer)
            
            # Cr√©er quelques pi√®ces
            rooms_data = [
                ("Salle de jeu", "Espace principal d'activit√©", 1),
                ("Cuisine", "Pr√©paration des repas", 2),
                ("Salle de bain", "Sanitaires et change", 3),
                ("Entr√©e", "Hall d'accueil", 4)
            ]
            
            for name, desc, order in rooms_data:
                room = Room(
                    name=name,
                    description=desc,
                    display_order=order
                )
                db.add(room)
            
            # Cr√©er quelques mod√®les de t√¢ches
            tasks_data = [
                ("D√©sinfecter les surfaces", "Nettoyer et d√©sinfecter toutes les surfaces"),
                ("Aspirer/Balayer", "Nettoyage des sols"),
                ("Vider les poubelles", "√âvacuer les d√©chets"),
                ("Nettoyer les vitres", "Nettoyage des fen√™tres et miroirs")
            ]
            
            for title, desc in tasks_data:
                task = TaskTemplate(
                    title=title,
                    description=desc,
                    type=TaskType.DAILY
                )
                db.add(task)
            
            db.commit()
            print("‚úÖ Donn√©es d'exemple cr√©√©es")
            return True
            
        except Exception as e:
            db.rollback()
            print(f"‚ö†Ô∏è Erreur cr√©ation donn√©es d'exemple: {e}")
            return True  # Pas critique
        finally:
            db.close()
            
    except Exception as e:
        print(f"‚ö†Ô∏è Erreur donn√©es d'exemple: {e}")
        return True  # Pas critique

def main():
    """Fonction principale d'initialisation"""
    print("üöÄ Initialisation de la base de donn√©es avec UUID...")
    
    # Cr√©er les r√©pertoires
    try:
        for directory in ["uploads", "logs"]:
            Path(directory).mkdir(exist_ok=True)
        print("üìÅ R√©pertoires cr√©√©s")
    except Exception as e:
        print(f"‚ö†Ô∏è Impossible de cr√©er les r√©pertoires: {e}")
    
    # Cr√©er les tables
    if not create_tables():
        print("‚ùå √âchec de la cr√©ation des tables")
        sys.exit(1)
    
    # Cr√©er des donn√©es d'exemple
    create_sample_data()
    
    print("‚úÖ Initialisation termin√©e!")
    print("üìù Services disponibles:")
    print("1. API: http://localhost:8000")
    print("2. Documentation: http://localhost:8000/docs") 
    print("3. Interface DB: http://localhost:8080")

if __name__ == "__main__":
    main()