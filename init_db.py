"""
Script d'initialisation de la base de donn√©es
Usage: python init_db.py
"""
import asyncio
from sqlalchemy import create_engine
from api.core.database import Base, engine  
from api.core.config import settings
from api.models import User, Performer, Room, TaskTemplate, AssignedTask
from sqlalchemy.orm import sessionmaker
from decouple import config
import uuid

def create_tables():
    """Cr√©e toutes les tables"""
    engine = create_engine(settings.database_url)
    Base.metadata.create_all(bind=engine)
    print("‚úÖ Tables cr√©√©es avec succ√®s")

def populate_initial_data():
    """Ajoute des donn√©es initiales"""
    engine = create_engine(settings.database_url)
    SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
    db = SessionLocal()
    
    try:
        # Ex√©cutants par d√©faut
        performers = [
            {"name": "Marie Dupont"},
            {"name": "Jean Martin"},
            {"name": "Sophie Leroux"},
        ]
        
        for performer_data in performers:
            existing = db.query(Performer).filter(Performer.name == performer_data["name"]).first()
            if not existing:
                performer = Performer(**performer_data)
                db.add(performer)
        
        # Pi√®ces par d√©faut
        rooms = [
            {"name": "Salle de jeu", "description": "Espace principal d'activit√©", "display_order": 1},
            {"name": "Cuisine", "description": "Pr√©paration des repas", "display_order": 2},
            {"name": "Salle de bain", "description": "Sanitaires et change", "display_order": 3},
            {"name": "Entr√©e", "description": "Hall d'accueil", "display_order": 4},
            {"name": "Ext√©rieur", "description": "Cour et jardin", "display_order": 5},
        ]
        
        for room_data in rooms:
            existing = db.query(Room).filter(Room.name == room_data["name"]).first()
            if not existing:
                room = Room(**room_data)
                db.add(room)
        
        # T√¢ches par d√©faut
        tasks = [
            {"name": "D√©sinfecter les surfaces", "description": "Nettoyer et d√©sinfecter toutes les surfaces"},
            {"name": "Aspirer/Balayer", "description": "Nettoyage des sols"},
            {"name": "Vider les poubelles", "description": "√âvacuer les d√©chets"},
            {"name": "Nettoyer les vitres", "description": "Nettoyage des fen√™tres et miroirs"},
            {"name": "D√©sinfecter les jouets", "description": "Nettoyage et d√©sinfection des jouets"},
            {"name": "Nettoyer les WC", "description": "Nettoyage complet des sanitaires"},
            {"name": "Laver le linge", "description": "Lavage du linge de la cr√®che"},
        ]
        
        for task_data in tasks:
            existing = db.query(TaskTemplate).filter(TaskTemplate.name == task_data["name"]).first()
            if not existing:
                task = TaskTemplate(**task_data)
                db.add(task)
        
        db.commit()
        print("‚úÖ Donn√©es initiales ajout√©es avec succ√®s")
        
    except Exception as e:
        db.rollback()
        print(f"‚ùå Erreur lors de l'ajout des donn√©es: {e}")
    finally:
        db.close()

def main():
    """Fonction principale d'initialisation"""
    print("üöÄ Initialisation de la base de donn√©es...")
    
    # Cr√©er les tables
    create_tables()
    
    # Ajouter les donn√©es initiales
    populate_initial_data()
    
    print("‚úÖ Initialisation termin√©e!")
    print("\nüìù Prochaines √©tapes:")
    print("1. Configurer les t√¢ches assign√©es via l'API")
    print("2. Cr√©er les utilisateurs Firebase")
    print("3. D√©marrer l'application: uvicorn main:app --reload")

if __name__ == "__main__":
    main()